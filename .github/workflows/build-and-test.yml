name: Build, Test & Quality Analysis (H2 Profile)

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  pull-requests: write
  statuses: write

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  # ==========================================
  # JOB 1: CODE QUALITY & SECURITY
  # ==========================================
  code-quality:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: üîç Validate Maven POM
        run: mvn validate

      - name: üõ°Ô∏è OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check \
            -DfailBuildOnCVSS=8 \
            -DskipTestScope=true
        continue-on-error: true

      - name: üì§ Upload OWASP Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-report
          path: target/dependency-check-report.html
          retention-days: 30

      - name: üîí Trivy Filesystem Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: üì§ Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # ==========================================
  # JOB 2: BUILD & UNIT TESTS (H2)
  # ==========================================
  build-and-test:
    name: Build & Unit Tests (H2)
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: üî® Build and Run Unit Tests (H2)
        run: mvn clean test -B -Dspring.profiles.active=test -e > test-output.log 2>&1 || true

      - name: üîç Display Test Logs
        if: always()
        run: |
          echo "================================"
          echo "FULL TEST OUTPUT"
          echo "================================"
          cat test-output.log || echo "No test log"
          echo ""
          echo "================================"
          echo "SUREFIRE REPORTS"
          echo "================================"
          if [ -d target/surefire-reports ]; then
            for file in target/surefire-reports/*.txt; do
              echo "=== $file ==="
              cat "$file"
              echo ""
            done
          fi

      - name: üì§ Upload Test Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-logs
          path: |
            test-output.log
            target/surefire-reports/
          retention-days: 7

      - name: ‚úÖ Check Test Results
        run: |
          if grep -q "BUILD SUCCESS" test-output.log; then
            echo "‚úÖ Tests passed"
          else
            echo "‚ùå Tests failed, see logs"
            exit 1
          fi

      - name: üì¶ Package Application
        run: mvn package -DskipTests -B

      - name: üì§ Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/*.jar
          retention-days: 7

  # ==========================================
  # JOB 3: SONARCLOUD + COVERAGE (H2)
  # ==========================================
  sonarcloud-analysis:
    name: SonarCloud Quality Analysis (H2)
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: üß™ Run Tests and Generate Coverage
        run: mvn clean verify -B -Dspring.profiles.active=test
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb;MODE=PostgreSQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
          SPRING_DATASOURCE_USERNAME: sa
          SPRING_DATASOURCE_PASSWORD: ""

      - name: üìä SonarCloud Analysis
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=sivasinc_user-service \
            -Dsonar.organization=sivasinc \
            -Dsonar.host.url=https://sonarcloud.io
        continue-on-error: true

      - name: üìà Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: target/site/jacoco/jacoco.xml
          flags: h2-tests
          name: codecov-h2
          fail_ci_if_error: false

      - name: üì§ Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/site/jacoco/
          retention-days: 30

  # ==========================================
  # JOB 4: SUMMARY
  # ==========================================
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, sonarcloud-analysis]
    if: always()

    steps:
      - name: üìä Pipeline Summary
        run: |
          echo "================================"
          echo "   BUILD PIPELINE SUMMARY"
          echo "================================"
          echo ""
          echo "‚úÖ Code Quality: ${{ needs.code-quality.result }}"
          echo "‚úÖ Build & Unit Tests: ${{ needs.build-and-test.result }}"
          echo "‚úÖ SonarCloud Analysis: ${{ needs.sonarcloud-analysis.result }}"
          echo ""
          echo "================================"
