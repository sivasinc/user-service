name: Build and Test Pipeline

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  code-quality:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Validate Maven POM
        run: mvn validate

      - name: Run Checkstyle
        run: mvn checkstyle:check
        continue-on-error: true

      - name: OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check \
            -DfailBuildOnCVSS=8 \
            -DskipTestScope=true
        continue-on-error: true

      - name: Upload OWASP Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-report
          path: target/dependency-check-report.html
          retention-days: 30

      - name: Trivy Filesystem Scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: List files in workspace after Trivy
        run: ls -l

      - name: Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Compile Source Code
        run: mvn clean compile -B

      - name: Package Application
        run: mvn package -DskipTests -B

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/*.jar
          retention-days: 7

      - name: Display Build Info
        run: |
          echo "Build Information:"
          ls -lh target/*.jar
          echo "JAR Details:"
          jar -tf target/*.jar | head -20

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Run Unit Tests
        run: mvn test -B

      - name: Generate Test Report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Unit Test Results
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: false

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: |
            target/surefire-reports/
            target/site/jacoco/
          retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Run Integration Tests
        run: mvn verify -DskipUnitTests -B
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test

      - name: Generate Integration Test Report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Integration Test Results
          path: target/failsafe-reports/*.xml
          reporter: java-junit
          fail-on-error: false

      - name: Upload Integration Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: target/failsafe-reports/
          retention-days: 30

  code-coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Run All Tests with Coverage
        run: mvn clean verify -B
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test

      - name: Generate JaCoCo Report
        run: mvn jacoco:report

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-user-service
          fail_ci_if_error: false

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/site/jacoco/
          retention-days: 30

      - name: Coverage Summary
        run: |
          echo "Code Coverage Summary:"
          cat target/site/jacoco/index.html | grep -A 3 "Total" || echo "Coverage report generated"

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [code-quality, build, unit-tests, integration-tests, code-coverage]
    if: always()
    steps:
      - name: Pipeline Summary
        run: |
          echo "================================"
          echo "   BUILD PIPELINE SUMMARY"
          echo "================================"
          echo ""
          echo "‚úÖ Code Quality: ${{ needs.code-quality.result }}"
          echo "‚úÖ Build: ${{ needs.build.result }}"
          echo "‚úÖ Unit Tests: ${{ needs.unit-tests.result }}"
          echo "‚úÖ Integration Tests: ${{ needs.integration-tests.result }}"
          echo "‚úÖ Code Coverage: ${{ needs.code-coverage.result }}"
          echo ""
          echo "================================"
          if [[ "${{ needs.code-quality.result }}" == "success" ]] && \
             [[ "${{ needs.build.result }}" == "success" ]] && \
             [[ "${{ needs.unit-tests.result }}" == "success" ]] && \
             [[ "${{ needs.integration-tests.result }}" == "success" ]] && \
             [[ "${{ needs.code-coverage.result }}" == "success" ]]; then
            echo "üéâ BUILD SUCCESSFUL!"
            exit 0
          else
            echo "‚ùå BUILD FAILED!"
            exit 1
          fi

